//线性表的单链表存储结构
typedef struct Node
{
    ElemType data;
    struct  Node *next;
}Node;
typedef struct Node *LinkList; //定义 LinkList

//单链表的读取
//初始条件：顺序线性表L已存在，1≤i≤ListLength(L）
//操作结果：用e返回L中号第i个数据元素的值
Status GetElem（LinkList L,int i ,ElemType *e)
{
    int j;
    LinkList p;//声明一指针
    p=L->next;//让p指向链表L的第一个结点
    j=1;//j为计数器
    while (p && j<i)
    {
        p=p->next//让p指向下一个结点
        ++j；
    }    
    if (!p||j>i)
        return error;//第i个结点不存在
    *e=p->data;//取第i个结点的数据
    return ok
}



//单链表的插入
//初始条件：顺序线性表L已存在，1≤i≤ListLength(L）
//操作结果：在L中第i个结点位置之前插入新的数据元素e，L的长度加1
Status GetElem（LinkList L,int i ,ElemType *e)
{
    int j;
    LinkList p,s;
    p=*L;
    j=1;
    while (p && j<i)//寻找第i-1个结点
    {
        p=p->next;
        ++j
    }
    if(!p||j>i)
        return  error;//第i个结点不存在
    s=(LinkList)malloc(sizeof(Node));//生成新的结点
    s->data=e;
    s->next=p->next;//.将p的后继结点赋值给s的后继
    p->next=s;//将s赋值给p的后继
    return ok；
    
}



//单链表的删除
//初始条件：顺序线性表L已存在，1≤i≤ListLength(L）
//操作结果：删除L的第i个结点，并用e返回其值，L的长度减1
Status GetElem（LinkList L,int i ,ElemType *e)
{
    int j;
    LinkList p,s;
    p=*L;
    j=1;
    while (p && j<i)//寻找第i-1个结点
      {
            p=p->next;
            ++j
      }
    if(!p->next||j>i)
        return  error;//第i个结点不存在
    q=p->next;
    p->next=q->next;//将q的后继赋值给p的后继
    *e=q->data;//将q结点中的数据给e
    free(q);//让系统回收此结点，释放内存
    return ok;

}
