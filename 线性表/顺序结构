//线性表的顺序存储结构代码
#define MAXSIZE 20
typedef int ElemType;
typedef struct 
{
    ElemType data[MAXSIZE];
    int length;
} SqList



//获得元素操作
#define ok 1
#define error 0
#define true 1
#define false 0 
typedef int Status;
//*Status是函数的类型，其值是函数结果状态代码，如ok等
//初始条件：初始线性表L已存在，1≤i≤ListLength(L)
//操作结果：用e返回L中第i个数据元素的值
Status GetElem(SqList L,int i,ElemType *e)
{
    if(L.length==0||i<1||i>L->length
    )
      return error;
    *e=L.data[i-1];
    return ok;
}



//插入操作
//初始条件：顺序线性表L已存在，1≤i≤ListLength(L)
//操作结果：在L中第i个位置之前插入行的数据元素e，L的长度加1
Status ListInsert(SqList *L,int i,ElemType e)
{
  int k;
  if (L->length=MAXSIZE)//如果顺序线性表已经满了
    return error;
  if (i<1||i>L->length+1)//如果i不在范围内时
    return error;
  if (i<=L->length) //如果插入数据位置不在队尾时   
  {
    for (k=L->length ; k>=i-1; k--)//将需要插入位置后所有的数据元素都向后移动一位
      L->data[k+1]=L->data[k];
  }
  L->data[i-1]=e;//插入新元素e
  L->length++;
  return ok;
}


//删除操作
//初始条件：顺序线性表L已存在，1≤i≤ListLength(L)
//操作结果删除L的第i个元素，并用e返回其值，L的长度减1
Status ListDelete(SqList *L,int i,ElemType *e)
{
  int k;
  if (L->length==0)
    return error;
  if (i<0||i>L->length)//如果i不在范围内时
    return error;
  *e=L->data[i-1];
  if (i<L->length)
  {
    for(k=i;k<L->length;k++)
      L->data[k-1]=L->data[k];
  }
L->length--;
return ok ;
}
